<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Sandro Padin</title>
 <link href="http://sa.ndropad.in/atom.xml" rel="self"/>
 <link href="http://sa.ndropad.in/"/>
 <updated>2013-04-04T10:29:24-05:00</updated>
 <id>http://sa.ndropad.in/</id>

 
 <entry>
   <title>Horizontal CSS Scroll Shadow</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/04/03/horizontal-css-scroll-shadow.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>03 Apr 2013</updated>
   <id>http://sa.ndropad.in/2013/04/03/horizontal-css-scroll-shadow</id>
   <content type="html">&lt;p&gt;I recently simplified the design of this blog. It’s based on this blog
by &lt;a href=&quot;http://stephaniebriones.com/&quot;&gt;Stephanie Briones&lt;/a&gt;, a design craftsman at 8th Light.&lt;/p&gt;

&lt;p&gt;One simple change I implemented made code examples horizontally scrollable on
mobile phones. I liked this a lot, but felt the wide code examples should
invite the user to scroll sideways.&lt;/p&gt;

&lt;p&gt;I’ve recently spotted an effect that hides overflowing content beneath a shadow 
to give the visual cue that there is more information to be seen. I did some
searching and found &lt;a href=&quot;http://lea.verou.me/2012/04/background-attachment-local/&quot;&gt;a great article&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/leaverou&quot;&gt;Lea Verou&lt;/a&gt; on how to accomplish
this effect with CSS.&lt;/p&gt;

&lt;p&gt;I adapted the code from the article to work with horizontally scrollable
content and this is what I came up with.&lt;/p&gt;

&lt;pre class=&quot;codepen&quot; data-height=&quot;300&quot; data-type=&quot;result&quot; data-href=&quot;LxbDA&quot; data-user=&quot;spadin&quot; data-safe=&quot;true&quot;&gt;
  &lt;code&gt;&lt;/code&gt;
  &lt;a href=&quot;http://codepen.io/spadin/pen/LxbDA&quot;&gt;Check out this Pen!&lt;/a&gt;
&lt;/pre&gt;
&lt;script async=&quot;&quot; src=&quot;http://codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;http://codepen.io/spadin/pen/zJuDh&quot;&gt;Play with the code on Code Pen&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using a Local Jar in Your Clojure Project</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/03/28/using-a-local-jar-in-your-clojure-project.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>28 Mar 2013</updated>
   <id>http://sa.ndropad.in/2013/03/28/using-a-local-jar-in-your-clojure-project</id>
   <content type="html">&lt;p&gt;I recently wrote a simple Java web server named &lt;a href=&quot;https://github.com/spadin/Jerver&quot;&gt;Jerver&lt;/a&gt; as a task during
my apprenticeship. After completing the server, my next task was to use
that server in Clojure and integrate it with &lt;a href=&quot;https://github.com/spadin/ticlj&quot;&gt;Ticlj&lt;/a&gt;, my Clojure-based Tic
Tac Toe game. I was to package the Java server as a .jar that I would
somehow use in &lt;a href=&quot;https://github.com/spadin/ticlj-on-jerver&quot;&gt;my new project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’d previously used libraries like &lt;a href=&quot;https://github.com/slagyr/speclj&quot;&gt;Speclj&lt;/a&gt; and &lt;a href=&quot;https://github.com/slagyr/joodo&quot;&gt;Joodo&lt;/a&gt; which have stable
and documented APIs. My Java server was neither stable nor documented,
so I needed a way to quickly and reliably update the server jar when I
realized and implemented new APIs I needed to expose to my Clojure project.&lt;/p&gt;

&lt;p&gt;I noticed up front this needed to be some sort of shell script which
runs the series of Maven commands for importing the jar from my server
project.&lt;/p&gt;

&lt;p&gt;I came up with the &lt;a href=&quot;https://gist.github.com/spadin/5265773&quot;&gt;following shell script&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;    mkdir -p lib/local
 
    &lt;span class=&quot;c&quot;&gt;# Set some defaults for JAR_VERSION, JAR_SOURCE and ARTIFACT_ID below.&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;JAR_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAR_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:=0.0.1-SNAPSHOT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;JAR_SOURCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAR_SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:=/Users/sandropadin/IdeaProjects/Jerver/target/jerver.jar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ARTIFACT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARTIFACT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:=jerver&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
     
    mvn deploy:deploy-file -DgroupId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                           -DartifactId&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ARTIFACT_ID&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                           -Dversion&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$JAR_VERSION&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                           -Dpackaging&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jar &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                           -Dfile&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$JAR_SOURCE&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                           -Durl&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;file:lib
     
     mvn -U dependency:resolve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I saved this file at &lt;code&gt;script/import-jar&lt;/code&gt; made it executable (chmod +x)
then I called it like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;     $ script/import-jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I would then just run this command multiple times during my development
process to quickly update the jar my Clojure project was using.&lt;/p&gt;

&lt;p&gt;The Clojure project.clj imports the jar:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    &lt;span class=&quot;ss&quot;&gt;:dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org.clojure/clojure&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.5.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local/jerver&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.0.1-SNAPSHOT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then my code uses the classes within the jar:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ticlj-on-jerver.api.resolver&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ticlj-on-jerver.api.response&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:only&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-status-code&lt;/span&gt;
                                                 &lt;span class=&quot;nv&quot;&gt;add-header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Resolver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;; This is an interface defined in the Java server&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;com.jerver.http.route.Routable&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;resolve &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:callback&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;resolver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Resolver.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After all the setup, once I made a change to the Java server project, I
would generate the package using Maven, then run my &lt;code&gt;import-jar&lt;/code&gt; script
to import the newly generated package and update the dependencies in my
Clojure project.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Joodo *view-context*</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/03/27/joodo-view-context.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>27 Mar 2013</updated>
   <id>http://sa.ndropad.in/2013/03/27/joodo-view-context</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/slagyr/joodo&quot;&gt;Joodo&lt;/a&gt; is a web framework for Clojure, similar to &lt;a href=&quot;https://github.com/sinatra/sinatra&quot;&gt;Sinatra&lt;/a&gt; for
Ruby. &lt;/p&gt;

&lt;p&gt;If you’ve tried Sinatra you’ve probably used variables inside of
views. A common way to do this is by setting an instance variable in the
controller:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/hello/:name&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;erb&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hello&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which then &lt;em&gt;magically&lt;/em&gt; grants you the ability to use that variable in the
view:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;erb&quot;&gt;&lt;span class=&quot;x&quot;&gt;    &amp;lt;p&amp;gt;Hello &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I say magically, because it’s not clear up front how those instance
variables get passed to the view. &lt;em&gt;Hint: Sinatra, like Rails, uses &lt;a href=&quot;https://github.com/rtomayko/tilt&quot;&gt;Tilt&lt;/a&gt;
to render templates, which allows &lt;a href=&quot;https://github.com/rtomayko/tilt/blob/master/lib/tilt/template.rb#L76-L78&quot;&gt;setting a scope for the template&lt;/a&gt; that
is being rendered.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;enough-about-ruby-what-does-this-have-to-do-with-joodo-and-clojure&quot;&gt;Enough about Ruby, what does this have to do with Joodo and Clojure?&lt;/h3&gt;

&lt;p&gt;Joodo has an analogous way of passing data to your &lt;a href=&quot;https://github.com/weavejester/hiccup&quot;&gt;Hiccup&lt;/a&gt; view;
it’s done via the &lt;code&gt;*view-context*&lt;/code&gt; binding. &lt;/p&gt;

&lt;p&gt;Rendering a Hiccup template with Joodo is done in the controller:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;/hello/:first-name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;first-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render_template&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;first-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now in your &lt;code&gt;hello.hiccup.clj&lt;/code&gt; you are able to retrieve and use the
parameter:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*view-context*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or nicer yet, especially if you use first name more than once.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;first-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*view-context*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;first-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Passing parameters to Hiccup views in Clojure is more akin to &lt;a href=&quot;http://xyzpub.com/en/ruby-on-rails/3.2/dynamische_webseiten.html#partials_locale_variables&quot;&gt;passing
locals with Sinatra&lt;/a&gt; in that they have to be explicitly declared. I didn’t
lead with that though since a majority of people are familiar with
sending and using instance variables instead.&lt;/p&gt;

&lt;p&gt;Final note: The Joodo &lt;code&gt;*view-context*&lt;/code&gt; is a globally available binding for the current
request that is being rendered. As such, it can be accessed from your
&lt;code&gt;layout.hiccup.clj&lt;/code&gt; as well as any partials that you may need to render
as well.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Jerver, part 1</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/03/14/jerver.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>14 Mar 2013</updated>
   <id>http://sa.ndropad.in/2013/03/14/jerver</id>
   <content type="html">&lt;p&gt;I’ve spent this week learning about sockets and reading RFCs in order to
create a Java-based web server. I call it &lt;a href=&quot;https://github.com/spadin/Jerver&quot;&gt;Jerver&lt;/a&gt;. (Can you tell I like
&lt;a href=&quot;http://en.wikipedia.org/wiki/Portmanteau&quot;&gt;portmanteaus&lt;/a&gt;; &lt;a href=&quot;https://github.com/spadin/ticlj&quot;&gt;Ticlj&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/spadin/taclj&quot;&gt;Taclj&lt;/a&gt;) It’s been a fun and
challenging week.&lt;/p&gt;

&lt;p&gt;I was pretty worried when I was tasked to create a web server in one
week. Granted, the requirements did not call for a fully-featured web sever,
but a web server, nonetheless.&lt;/p&gt;

&lt;p&gt;While I’ve never written a web server, I have researched the topic a bit
for my own knowledge. &lt;/p&gt;

&lt;p&gt;My initial accessment was that a server would need to:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;        * Accept a connection
        * Parse a request
        * Interpret headers
        * Parse HTTP params
          * Parse content-length
        * Determine HTTP method (GET, POST, HEAD, etc)
          * Route a request to a resource
          * Determine the mime type of the resource
          * Write the response back through the connection
          * Close the connection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While there are more intermediary steps that I may need to add
eventually, these simple steps are enough to get a web-server running.&lt;/p&gt;

&lt;p&gt;I will be writing a series of posts on my design decisions for
implementing this web server. As mentioned above, this is not a
feature-complete web-server, but could serve as a good way to learn
about servers and a good starting point for your own implementations.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Changing Key Bindings in Zsh</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/03/10/changing-key-bindings-in-zsh.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>10 Mar 2013</updated>
   <id>http://sa.ndropad.in/2013/03/10/changing-key-bindings-in-zsh</id>
   <content type="html">&lt;h1 id=&quot;key-bindings-in-zsh-with-bindkey&quot;&gt;Key bindings in zsh with bindkey&lt;/h1&gt;
&lt;p&gt;I’ve recently had a newfound interest in trying to learn more about how
exactly the tools I use on a day-to-day basis work. One of these tools
is my terminal; in particular, I use the Zshell, or zsh. &lt;/p&gt;

&lt;p&gt;One way that I use of traversing through my prompt is Option-Left arrow
and Option-Right arrow to jump from word to word on the line. On
occassion, I find the need to jump to the beginning or end of the line
and end up either jumping word for word or just pressing and holding the
arrow key. While I supposed either of these are fine, I thought there
should be a quicker way to jump to the beginning or end of a line.&lt;/p&gt;

&lt;p&gt;I began looking into key bindings, and this is what I found. These tips
work well for me, using zsh and OS X, but as they say, your mileage may
vary.&lt;/p&gt;

&lt;h2 id=&quot;finding-a-key-sequence&quot;&gt;Finding a key sequence&lt;/h2&gt;
&lt;p&gt;In order to bind a key to a command you need two things, a key and a
command. A way to find the key, also known as the escape sequence, is by
following a simple series of steps.&lt;/p&gt;

&lt;p&gt;Typing Ctrl-v on your prompt reads the next character literally and
prints it. You can try it by typing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&amp;lt;ctrl-v&amp;gt;&amp;lt;ctrl-vleft-arrow&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: actually enter Ctrl-v followed by the left arrow key.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Which should print:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;^&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You’re output may be different depending on yourour operating system.&lt;/p&gt;

&lt;p&gt;Regardless of the actual ouput, you can now bind that output to a
certain command, so for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bindkey &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;ctrl-v&amp;gt;&amp;lt;ctrl+left-arrow&amp;gt;&amp;#39;&lt;/span&gt; beginning-of-line
     &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bindkey &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;ctrl-v&amp;gt;&amp;lt;ctrl+right-arrow&amp;gt;&amp;#39;&lt;/span&gt; end-of-line
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These will bind Ctrl+Left-arrow to move the cursor to the beginning
of the line and Ctrl+Right-arrow to move the cursor to the end of the
line.&lt;/p&gt;

&lt;p&gt;To make these changes permanent, you would add these to lines to your
&lt;code&gt;.zshrc&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;    bindkey &lt;span class=&quot;s1&quot;&gt;&amp;#39;^[[1;5D&amp;#39;&lt;/span&gt; beginning-of-line
     bindkey &lt;span class=&quot;s1&quot;&gt;&amp;#39;^[[1;5C&amp;#39;&lt;/span&gt; end-of-line
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I believe that Ctrl-Left arrow/Right arrow may be used in Linux
distros to move forward/backward one word, so you may want to bind these
two commands to some other key sequence.&lt;/p&gt;

&lt;p&gt;Check the resources below for more detailed information and a list of
possible commands you can use for binding.&lt;/p&gt;

&lt;h2 id=&quot;tmux-protip&quot;&gt;tmux protip&lt;/h2&gt;
&lt;p&gt;If you notice these key bindings work as expected in Zsh, but stop
working when using tmux, you may have to add this to your &lt;code&gt;~/.tmux.conf&lt;/code&gt;
file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;    set-window-option -g xterm-keys on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://zshwiki.org/home/zle/bindkeys&quot;&gt;ZshWiki - zle:bindkeys&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.elte.hu/zsh-manual/zsh_14.html&quot;&gt;Zsh Line Editor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Mocking Records and Protocols</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/03/05/mocking-records-and-protocols.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>05 Mar 2013</updated>
   <id>http://sa.ndropad.in/2013/03/05/mocking-records-and-protocols</id>
   <content type="html">&lt;p&gt;I recently wanted to test that a record was calling a function of
another record in Clojure and was having a hard time figuring out how to
go about the testing. I came up with a this which reminds me of mocking,
although indirectly.&lt;/p&gt;

&lt;p&gt;Generally when you define a record in Clojure, you also define a binding
for accessing that record in the same namespace such as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defprotocol &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;afunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AImpl&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;afunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AImpl.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
If you do this for your records, one way of mocking is to redefine that
binding and reify the protocol with the stubbed method.&lt;/p&gt;

&lt;p&gt;This is what I came up with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;;;core-spec.clj&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stubbing.core-spec&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;speclj.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stubbing.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;B protocol&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;returns 10 as expected&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;can stub A&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with-redefs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reify&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;return-10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stubbed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stubbed&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;;;core.clj&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stubbing.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defprotocol &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;return-10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defprotocol &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AImpl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;return-10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AImpl.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BImpl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;return-10&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BImpl.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
This worked out well for me. I hope anyone learning Clojure finds it
useful as well.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning To Type</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/03/01/learning-to-type.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>01 Mar 2013</updated>
   <id>http://sa.ndropad.in/2013/03/01/learning-to-type</id>
   <content type="html">&lt;p&gt;I’ve been programming now for more than 5 years. I;ve developed my
programming skills and knowledge nicely, but one thing I’ve never been happy
with is my typing ability. While I’m not necessarily a hunt-and-peck
typist, I am also not a confident typist. I ocassionally look down at the
keyboard and am constantly fixing typos with the delete key. Overall, I
would consider my typing very below average.&lt;/p&gt;

&lt;p&gt;I’ve decided to change that. I’m taking an online typing course at
&lt;a href=&quot;http://www.typingweb.com/&quot;&gt;TypyingWeb&lt;/a&gt; and will continue to practice my typing skills in the
hopes of becoming comfortable with &lt;a href=&quot;http://en.wikipedia.org/wiki/Touch_typing&quot;&gt;touch typing&lt;/a&gt; and eventually type
at least 80 words per minute confidently.&lt;/p&gt;

&lt;p&gt;During my research into finding a free/cheap online typing program, I
ran across this article by Jeff Atwood titled, “&lt;a href=&quot;http://www.codinghorror.com/blog/2008/11/we-are-typists-first-programmers-second.html&quot;&gt;We Are Typists First,
Programmers Second&lt;/a&gt;,” which helped validate my resolution.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Sharing Functions Between Records in Clojure</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/27/sharing-functions-between-records-in-clojure.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>27 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/27/sharing-functions-between-records-in-clojure</id>
   <content type="html">&lt;p&gt;Today I came across a nice way to share functionality between records
that extend the same protocol in Clojure. I recently wanted a way to
encapsulate some functionality into a record via &lt;code&gt;defrecord&lt;/code&gt; but noticed
some duplication, after a little digging around I found some nice tips
for doing this. Unfortunately, I can’t find those links in my history. I
have the next best thing though, some test code examples.&lt;/p&gt;

&lt;p&gt;Notice in the example below that both &lt;code&gt;TextPrinter&lt;/code&gt; and &lt;code&gt;HtmlPrinter&lt;/code&gt;
have access to the &lt;code&gt;ouput&lt;/code&gt; function and &lt;code&gt;upper-case&lt;/code&gt; function.
&lt;code&gt;HtmlPrinter&lt;/code&gt; overrides the default &lt;code&gt;output&lt;/code&gt; function while
&lt;code&gt;TextPrinter&lt;/code&gt; keeps both defaults. This pattern may work well if you
would like to reduce duplication and separate these records into
difference namespaces.&lt;/p&gt;

&lt;p&gt;Sample code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;; src/protocol_test/core.clj&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protocol-tests.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defprotocol &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IPrinter&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upper-case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PrinterDefaults&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;ss&quot;&gt;:upper-case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clojure.string/upper-case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))})&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TextPrinter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HtmlPrinter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TextPrinter&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;IPrinter&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;merge &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PrinterDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;HtmlPrinter&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;IPrinter&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;merge &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PrinterDefaults&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upper-case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
And the tests:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;; spec/protocol_tests/core_spec.clj&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protocol-tests.core-spec&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;speclj.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protocol-tests.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protocol_tests.core&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TextPrinter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;HtmlPrinter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;core&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;returns the default functionality&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sample text&amp;quot;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-out-str &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TextPrinter.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sample text&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;returns the SAMPLE TEXT surrounded by a p tag&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;SAMPLE TEXT&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-out-str &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HtmlPrinter.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sample text&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Aside:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice how I had to &lt;code&gt;import&lt;/code&gt; the records in the spec. I had to use an
underscore in &lt;code&gt;protocol_tests.core&lt;/code&gt; which I believe is a bug in the 
current version of Clojure (1.4).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>First Day Practicing Joodo</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/26/first-day-practicing-joodo.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>26 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/26/first-day-practicing-joodo</id>
   <content type="html">&lt;p&gt;I downloaded and started working with Joodo this morning. This is my
first Clojure web framework. I’ve work with several other web frameworks
in several languages and I’m familiar with how they work. &lt;/p&gt;

&lt;p&gt;Joodo is as simple to use as any other framework. The setup time was
minimal and I had the server up and running in less than 30 minutes. The
only bump I came up against was when I tried deploying my test app on
Heroku. The included Procfile wasn’t starting up the web worker properly
and Heroku complained about binding to the wrong port and address. I
fixed these and was about to submit a bug when I noticed the bug is
already fixed on the Joodo Github repo but the new jar hasn’t been
deployed to Clojars. &lt;/p&gt;

&lt;p&gt;Working with Joodo meant working with hiccup templates. When I first saw
these templates a few weeks ago I found them a bit odd. They reminded me
of Haml which I don’t use unless necessary. Having worked with Clojure
these past few weeks, however, has warmed me up to these hiccup
templates and now I find them very easy to use. I also enjoy not having
to switch contexts in my brain from HTML to Clojure and vice versa. &lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.joodoweb.com/&quot;&gt;Joodo Web Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/weavejester/hiccup&quot;&gt;Hiccup Templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>SOLID</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/24/solid.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>24 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/24/solid</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This post will be edited as I learn more about SOLID. For
information from more authoritative sources check the
&lt;a href=&quot;#references&quot;&gt;references&lt;/a&gt; below.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;single-responsibility-principle&quot;&gt;Single Responsibility Principle&lt;/h3&gt;

&lt;p&gt;Every class should have a single responsibility. A responsibility is
defined as a reason to change.&lt;/p&gt;

&lt;p&gt;Take the following example (adapted from this &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.SrpInRuby&quot;&gt;SRP in Ruby article&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# employee.rb
class Employee
  def set_hours(hours)
  ...
  end
  def calculate_pay
  ...
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Employee class is calculating the pay and accepts the number of
hours an employee works. Those are two separate responsibilities.&lt;/p&gt;

&lt;p&gt;This change would assure each file has only a single responsibility.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# employee_time.rb
class EmployeeTime
  def set_hours(hours)
  ...
  end
end

# employee_pay.rb
class EmployeePay
  def calculate_pay
  ...
  end
end

# employee.rb
require &#39;employee_time&#39;
require &#39;employee_pay&#39;

class Employee
  include EmployeeTime
  include EmployeePay
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;openclosed-principle&quot;&gt;Open/closed Principle&lt;/h3&gt;

&lt;p&gt;You should be able to extend a class’ behavior without modifying the
class.&lt;/p&gt;

&lt;h3 id=&quot;liskov-substitution-principle&quot;&gt;Liskov Substitution Principle&lt;/h3&gt;

&lt;p&gt;Derived classes should be substitutable for their base classes.&lt;/p&gt;

&lt;h3 id=&quot;interface-segregation-principle&quot;&gt;Interface Segregation Principle&lt;/h3&gt;

&lt;p&gt;Make fine grained classes that are client specific.&lt;/p&gt;

&lt;h3 id=&quot;dependency-inversion-principle&quot;&gt;Dependency Inversion Principle&lt;/h3&gt;

&lt;p&gt;Depend on abstractions, not concretions.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&quot;&gt;The Principles of OOD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID (object-oriented design)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Installing Ruby 2.0.0-p0</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/24/installing-ruby-2-0-0-p0.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>24 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/24/installing-ruby-2-0-0-p0</id>
   <content type="html">&lt;p&gt;I kept receiving a complilation error while installing Ruby 2.0.0-p0 today. &lt;/p&gt;

&lt;p&gt;I use rbenv/ruby-build and had to use this snippet for installation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;    $ CC=cc rbenv install 2.0.0-p0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope this helps anyone experiencing trouble installing Ruby 2.0.0&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Four-by-four Tic Tac Toe</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/21/four-by-four-tic-tac-toe.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>21 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/21/four-by-four-tic-tac-toe</id>
   <content type="html">&lt;p&gt;I started refactoring my code in preparation of implementing the 4x4
board and the eventual 3x3x3 board. I began by re-namespacing my files
for clarity. In my main &lt;code&gt;ticlj&lt;/code&gt; directory, I now have &lt;code&gt;board&lt;/code&gt;, &lt;code&gt;player&lt;/code&gt;,
&lt;code&gt;printer&lt;/code&gt; and &lt;code&gt;rules&lt;/code&gt; as directories and &lt;code&gt;core.clj&lt;/code&gt; as the only file in the
root directory. I felt this cleaned up the root directory and made the
subdirectory names more meaningful. I previously had &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;io&lt;/code&gt; as the
only subdirectories of the root which weren’t very clear. &lt;/p&gt;

&lt;p&gt;I also began converting functions to use multi-methods as their data source 
and the process has been pretty straightforward. &lt;/p&gt;

&lt;p&gt;I worked my way through adding new tests that needed a 4x4 counterpart.
Once done, I realized I hadn’t ran the game once to see how things were
going and I was very proud. After making sure there weren’t any missing
tests, I fired up the game and everything worked right off the bat. The
4x4 board printed as expected and the AI’s played without problems (aside
form performance issues). Everything worked as well, if not better than I 
could have hoped for the first run.&lt;/p&gt;

&lt;p&gt;Now I think the 3x3x3 Tic Tac Toe game should be very easy to implement
as well. I’ll be doing that next week.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: It’s my mom’s 71st Birthday today. :tada:&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Powerline</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/20/powerline.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>20 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/20/powerline</id>
   <content type="html">&lt;p&gt;I ran across a cool Vim plugin today named, &lt;a href=&quot;https://github.com/Lokaltog/powerline&quot;&gt;Powerline&lt;/a&gt;. It nicely decorates
your Vim status line and includes VCS status, file path, file type,
etc. My previous status line was hard to read and understand so I hardly
looked at it.&lt;/p&gt;

&lt;p&gt;Here’s a look at my new Vim status line:
&lt;a href=&quot;/images/powerline-vim.png&quot;&gt;&lt;img src=&quot;/images/powerline-vim.png&quot; alt=&quot;Vim Powerline status line&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Along the way, while figuring out how to configure Powerline for Vim, I
ran across &lt;a href=&quot;https://github.com/erikw/tmux-powerline&quot;&gt;tmux-powerline&lt;/a&gt; which decorates tmux’s status line. The
concept is directly taken from Powerline, but there are more widgets
for showing different information, including: WAN and
LAN IP, your current Git branch and status, weather, and a few
more.&lt;/p&gt;

&lt;p&gt;Here’s a look at my new tmux status line:
&lt;a href=&quot;/images/tmux-powerline.png&quot;&gt;&lt;img src=&quot;/images/tmux-powerline.png&quot; alt=&quot;tmux-powerline status line&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both plugins look nice, but besides the aesthetics, the information
the provided is very useful and prensented clearly.&lt;/p&gt;

&lt;p&gt;Although the setup for these plugins is a little difficult, I still
recommend taking the half hour to an hour it takes and check them out.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>4x4 Tic Tac Toe</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/19/4x4-tic-tac-toe.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>19 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/19/4x4-tic-tac-toe</id>
   <content type="html">&lt;p&gt;I spent the majority of the day determining how I should add the 4x4
game to my implementation. As far as I can tell there are three major
parts that change: the rules, printer and board. I will likely convert
these to protocols and define types for them. I’m interested in seeing
how I can refactor my code effectively and reduce bugs from simple copy
and paste mistakes. &lt;/p&gt;

&lt;p&gt;I’ll post updates this week with my findings. I’ll also be posting about
&lt;a href=&quot;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt; this week in preparation of “teaching” Micah about the subject.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Alpha-Beta Pruning</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/18/alpha-beta-pruning.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>18 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/18/alpha-beta-pruning</id>
   <content type="html">&lt;p&gt;After a week of struggling with the implementation, I finally got
Minimax with alpha-beta pruning working.&lt;/p&gt;

&lt;p&gt;I found it difficult to debug my code. I had some print statements
peppered throughout the code but with the recursive nature of this
algorithm, it was tough to really step through the code in order to
determine where my bugs were. It took a combination of print statements
and working through the code by hand for me to finally figure out what
was going wrong, missing return variables.&lt;/p&gt;

&lt;p&gt;While the process was tedious, I can appreciate having gone through it.
Now I can confidently say I understand the Minimax algorithm and the
alpha-beta pruning aspect of it as well. &lt;/p&gt;

&lt;p&gt;Now on to my next task of creating a 4x4 board and a 3x3x3 game.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Nearing The End of The Tunnel</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/14/nearing-the-end-of-the-tunnel.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>14 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/14/nearing-the-end-of-the-tunnel</id>
   <content type="html">&lt;p&gt;I really can’t thank Rick enough for once again spending a good half
hour, if not more, helping me with this algorithm. I can finally see the
light at the end of the tunnel. &lt;/p&gt;

&lt;p&gt;My implementation of the alpha beta pruning search still has some bugs,
but I feel confident I’ve modeled the function well enough to fix the
bugs with relative ease. I’m hoping I can finish this up tomorrow
morning. &lt;/p&gt;

&lt;p&gt;The next step is implementing  an easy AI. This should only take me
about half a day so hopefully I can make up some of the time I lost
implementing Minimax.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>YASIM</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/13/yasim.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>13 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/13/yasim</id>
   <content type="html">&lt;p&gt;I spent the day trying to implement the alpha-beta pruning search 
algorithm. I’m not sure why it’s taking me so long to learn this algorithm. 
Rick was kind enough to walk me through the algorithm as he understands 
it this afternoon which was very helpful.&lt;/p&gt;

&lt;p&gt;My major blockng point is visualizing the algorithm in the context of my
Clojure Tic Tac Toe game. I’ve read several articles on this algorithm
and on their own they make sense, but when I try to apply what I learn to 
my game I get stuck. I feel I’m very close though and since this is the most 
important part of my game the time I’m investing learning this algorithm 
is well worth it.&lt;/p&gt;

&lt;p&gt;This afternoon Corey Haines stopped by and hung out for a little bit.
He was kind enough to give Rick and I his thoughts on Minimax and a
different approach to thinking about the board and the moves. Rick
mentioned that he was thinking of doing a kata on his Java server, and
asked Corey his thoughts on how to approach the test for kata. Corey went 
on the whiteboard and gave some interesting ideas for that as well. I
haven’t gotten to the Java server yet, but it was still interesting to
hear their thoughts on the topic.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Minimax and Geekfest</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/12/minimax-completed-and-geekfest.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>12 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/12/minimax-completed-and-geekfest</id>
   <content type="html">&lt;p&gt;Today I finished debugging my minimax algorithm implementation in
Clojure. I finally figured out the bug in my code. I’d previously been
returning a hash which included the position being returned by the recursive 
call, whereas I should have just been returning the position from the current 
loop iteration. &lt;/p&gt;

&lt;p&gt;Here’s the finished simple minimax algorithm:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;min-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;moves&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;board/get-empty-indices&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;:let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;board/set-mark-at-index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rules/gameover?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;; this is where my bug was&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate-score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rules/next-player&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;ss&quot;&gt;:position&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rules/next-player&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;inc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
             &lt;span class=&quot;ss&quot;&gt;:position&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reduce &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;lt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;val &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;max-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;moves&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;board/get-empty-indices&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;:let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;board/set-mark-at-index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rules/gameover?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;; this is where my bug was&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate-score&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;ss&quot;&gt;:position&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rules/next-player&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;inc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
             &lt;span class=&quot;ss&quot;&gt;:position&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reduce &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;val &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
This algorithm isn’t quite complete. It’s slow and not as smart as it can be. I’ll be 
refactoring the algorithm to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning&quot;&gt;Alpha-beta pruning&lt;/a&gt; tomorrow.&lt;/p&gt;

&lt;p&gt;I took a break during lunch to go to my first &lt;a href=&quot;http://www.meetup.com/Geekfest/&quot;&gt;Geekfest&lt;/a&gt;. The topic today
was Clojure which was cool as I’ve been working with it so
much lately. The talk focused on ways to define macros and arguments 
for and against using macros. Overall it was an interesting talk although a bit 
complicated at points. I don’t really see myself applying what I learned
about macros anytime soon, but I enjoyed the talk.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Head Scratch Minimax</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/11/head-scratch-minimax.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>11 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/11/head-scratch-minimax</id>
   <content type="html">&lt;p&gt;I spent all of today trying to implement the minimax algorithm in
Clojure. I spent the morning looking at my old Ruby implementation and
determining how to convert it to a functional style.&lt;/p&gt;

&lt;p&gt;I came up with a plan for testing the &lt;code&gt;min-move&lt;/code&gt; and &lt;code&gt;max-move&lt;/code&gt; functions
and began implementing. Figuring out which tests to write proved to be
very difficult. &lt;/p&gt;

&lt;p&gt;My unfamiliarity with Clojure caught up with me today. I was testing the
functions and some aspects where working while others were not, it was
very frustrating. &lt;/p&gt;

&lt;p&gt;I finally decided to fire up the REPL and run some examples as a sanity
check which is when I found the bug that had been biting me all day. &lt;/p&gt;

&lt;p&gt;I was calculating the &lt;code&gt;max-move&lt;/code&gt; by first running a &lt;code&gt;for&lt;/code&gt; loop that collects
all the moves with their score as a list, then tries to reduce that list to only
hold the item with the highest score. I was doing the opposite for the
&lt;code&gt;min-move&lt;/code&gt; function. Or so I thought…&lt;/p&gt;

&lt;p&gt;Neither the &lt;code&gt;max-move&lt;/code&gt; nor the &lt;code&gt;min-move&lt;/code&gt; functions were working as I
expected them. The way in which I was reducing the list of moves and
scores was incorrect. &lt;/p&gt;

&lt;p&gt;And that is where I left off this evening. Now that I understand what
isn’t functioning I can go in with a clear head tomorrow morning and
finish the minimax algorithm. &lt;/p&gt;

&lt;p&gt;This is the non-functioning Minimax algorithm for posterity.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;min-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;moves&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;board/get-empty-indices&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
             &lt;span class=&quot;ss&quot;&gt;:let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;board/set-mark-at-index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rules/gameover?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
           &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate-score&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:position&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rules/next-player&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reduce min-key &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reverse &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;max-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;moves&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;board/get-empty-indices&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;ss&quot;&gt;:let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;board/set-mark-at-index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rules/gameover?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate-score&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:position&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rules/next-player&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new-board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reduce max-key &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:score&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reverse &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Week One at 8th Light</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/08/week-one-at-8th-light.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>08 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/08/week-one-at-8th-light</id>
   <content type="html">&lt;p&gt;It’s been a great first week at 8th Light as a Resident Apprentice. I
started the week by performing the &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata&quot;&gt;bowling game kata&lt;/a&gt; in Java for &lt;a href=&quot;http://www.8thlight.com/our-team/micah-martin&quot;&gt;Micah&lt;/a&gt; with
Rick, a fellow apprentice. I enjoyed practicing the kata last weekend,
but it still took me 15 minutes to perform which was 5 minutes shy of
my 10 minute goal. I realized if I want to get my time down I don’t just need to
type faster, but really get familiar with IntelliJ IDEA to take advantage of all
the keyboard shortcuts it offers. I hadn’t programmed in Java in quite a few
years, and I was happily surprised to find a new feature (to me)
called annotations. From Wikipedia, “An annotation, in the Java
computer programming language, is a form of syntactic metadata that
can be added to Java source code.” In short, annotations let you add
information about the source code. I noticed annoations while using JUnit,
the tests are marked with an &lt;code&gt;@Test&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;I’ve spent the majority of this week learning Clojure and making a 
command-line Tic Tac Toe game. The process has been rewarding and 
frustrating at the same time. I call the project &lt;a href=&quot;https://github.com/spadin/ticlj&quot;&gt;Ticlj&lt;/a&gt;, although 
I’m planning to change the name to &lt;a href=&quot;https://github.com/spadin/ticlj&quot;&gt;TicljTacToe&lt;/a&gt; soon. I wrote the 
basic human vs human game in a few days, but after talking to Micah, I 
learned the way I coded my program had imperative programming qualities rather 
than being purely functional; I kept a reference to the Tic Tac Toe board and 
I was changing the reference to point at other iterations of the board via &lt;code&gt;ref&lt;/code&gt; 
and &lt;code&gt;ref-set&lt;/code&gt; calls.&lt;/p&gt;

&lt;p&gt;I took some time today to refactor my game into being purely
functional. In order to do so, I had to change about 15 or so
functions to accept a new &lt;code&gt;board&lt;/code&gt; argument. By doing so, the reference
to the board was no longer necessary, so now my Tic Tac Toe game has no
mutable state.&lt;/p&gt;

&lt;p&gt;I’m very happy with what I’ve been able to accomplish this week.
Clojure has actually been a nice language to work with, aside from the
initial shock over the incredible number of parenthesis, the language
is simple and succint.&lt;/p&gt;

&lt;p&gt;Thanks to Micah, Rick, Ryan and Rylan for helping me wrap my head
around functional programming principles. After a long time of not thinking
about it, the principles of functional programming were a little
confusing, but I think I have a good grasp on it.&lt;/p&gt;

&lt;p&gt;On a separate note, I noticed some interesting books on design
patterns and TDD in the 8th Light library and I plan to take a closer 
look next week.&lt;/p&gt;

&lt;h3 id=&quot;things-to-accomplish-next-week&quot;&gt;Things to accomplish next week:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Complete the AI for my &lt;a href=&quot;https://github.com/spadin/ticlj&quot;&gt;Tic Tac Toe game.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Finish the full &lt;a href=&quot;https://github.com/spadin/ticlj&quot;&gt;Tic Tac Toe game.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Read a book from the 8th Light library.&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 

</feed>

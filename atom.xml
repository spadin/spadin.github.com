<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Sandro Padin</title>
 <link href="http://sa.ndropad.in/atom.xml" rel="self"/>
 <link href="http://sa.ndropad.in/"/>
 <updated>2013-03-10T23:24:42-05:00</updated>
 <id>http://sa.ndropad.in/</id>

 
 <entry>
   <title>Changing Key Bindings in Zsh</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/03/10/changing-key-bindings-in-zsh.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>10 Mar 2013</updated>
   <id>http://sa.ndropad.in/2013/03/10/changing-key-bindings-in-zsh</id>
   <content type="html">&lt;h1 id=&quot;key-bindings-in-zsh-with-bindkey&quot;&gt;Key bindings in zsh with bindkey&lt;/h1&gt;
&lt;p&gt;I’ve recently had a newfound interest in trying to learn more about how
exactly the tools I use on a day-to-day basis work. One of these tools
is my terminal; in particular, I use the Zshell, or zsh. &lt;/p&gt;

&lt;p&gt;One way that I use of traversing through my prompt is Option-Left arrow
and Option-Right arrow to jump from word to word on the line. On
occassion, I find the need to jump to the beginning or end of the line
and end up either jumping word for word or just pressing and holding the
arrow key. While I supposed either of these are fine, I thought there
should be a quicker way to jump to the beginning or end of a line.&lt;/p&gt;

&lt;p&gt;I began looking into key bindings, and this is what I found. These tips
work well for me, using zsh and OS X, but as they say, your mileage may
vary.&lt;/p&gt;

&lt;h2 id=&quot;finding-a-key-sequence&quot;&gt;Finding a key sequence&lt;/h2&gt;
&lt;p&gt;In order to bind a key to a command you need two things, a key and a
command. A way to find the key, also known as the escape sequence, is by
following a simple series of steps.&lt;/p&gt;

&lt;p&gt;Typing Ctrl-v on your prompt reads the next character literally and
prints it. You can try it by typing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&amp;lt;ctrl-v&amp;gt;&amp;lt;ctrl-vleft-arrow&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: actually enter Ctrl-v followed by the left arrow key.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Which should print:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;^&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You’re output may be different depending on yourour operating system.&lt;/p&gt;

&lt;p&gt;Regardless of the actual ouput, you can now bind that output to a
certain command, so for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bindkey &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;ctrl-v&amp;gt;&amp;lt;ctrl+left-arrow&amp;gt;&amp;#39;&lt;/span&gt; beginning-of-line
     &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bindkey &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;ctrl-v&amp;gt;&amp;lt;ctrl+right-arrow&amp;gt;&amp;#39;&lt;/span&gt; end-of-line
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These will bind Ctrl+Left-arrow to move the cursor to the beginning
of the line and Ctrl+Right-arrow to move the cursor to the end of the
line.&lt;/p&gt;

&lt;p&gt;To make these changes permanent, you would add these to lines to your
&lt;code&gt;.zshrc&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;    bindkey &lt;span class=&quot;s1&quot;&gt;&amp;#39;^[[1;5D&amp;#39;&lt;/span&gt; beginning-of-line
     bindkey &lt;span class=&quot;s1&quot;&gt;&amp;#39;^[[1;5C&amp;#39;&lt;/span&gt; end-of-line
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I believe that Ctrl-Left arrow/Right arrow may be used in Linux
distros to move forward/backward one word, so you may want to bind these
two commands to some other key sequence.&lt;/p&gt;

&lt;p&gt;Check the resources below for more detailed information and a list of
possible commands you can use for binding.&lt;/p&gt;

&lt;h2 id=&quot;tmux-protip&quot;&gt;tmux protip&lt;/h2&gt;
&lt;p&gt;If you notice these key bindings work as expected in Zsh, but stop
working when using tmux, you may have to add this to your &lt;code&gt;~/.tmux.conf&lt;/code&gt;
file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;    set-window-option -g xterm-keys on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://zshwiki.org/home/zle/bindkeys&quot;&gt;ZshWiki - zle:bindkeys&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.elte.hu/zsh-manual/zsh_14.html&quot;&gt;Zsh Line Editor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Mocking Records and Protocols</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/03/05/mocking-records-and-protocols.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>05 Mar 2013</updated>
   <id>http://sa.ndropad.in/2013/03/05/mocking-records-and-protocols</id>
   <content type="html">&lt;p&gt;I recently wanted to test that a record was calling a function of
another record in Clojure and was having a hard time figuring out how to
go about the testing. I came up with a this which reminds me of mocking,
although indirectly.&lt;/p&gt;

&lt;p&gt;Generally when you define a record in Clojure, you also define a binding
for accessing that record in the same namespace such as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defprotocol &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;afunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AImpl&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;afunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AImpl.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
If you do this for your records, one way of mocking is to redefine that
binding and reify the protocol with the stubbed method.&lt;/p&gt;

&lt;p&gt;This is what I came up with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;;;core-spec.clj&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stubbing.core-spec&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;speclj.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stubbing.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;B protocol&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;returns 10 as expected&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;can stub A&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with-redefs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reify&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;return-10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stubbed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stubbed&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;;;core.clj&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stubbing.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defprotocol &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;return-10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defprotocol &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AImpl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;return-10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AImpl.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BImpl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ten&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;return-10&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BImpl.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
This worked out well for me. I hope anyone learning Clojure finds it
useful as well.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning To Type</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/03/01/learning-to-type.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>01 Mar 2013</updated>
   <id>http://sa.ndropad.in/2013/03/01/learning-to-type</id>
   <content type="html">&lt;p&gt;I’ve been programming now for more than 5 years. I;ve developed my
programming skills and knowledge nicely, but one thing I’ve never been happy
with is my typing ability. While I’m not necessarily a hunt-and-peck
typist, I am also not a confident typist. I ocassionally look down at the
keyboard and am constantly fixing typos with the delete key. Overall, I
would consider my typing very below average.&lt;/p&gt;

&lt;p&gt;I’ve decided to change that. I’m taking an online typing course at
&lt;a href=&quot;http://www.typingweb.com/&quot;&gt;TypyingWeb&lt;/a&gt; and will continue to practice my typing skills in the
hopes of becoming comfortable with &lt;a href=&quot;http://en.wikipedia.org/wiki/Touch_typing&quot;&gt;touch typing&lt;/a&gt; and eventually type
at least 80 words per minute confidently.&lt;/p&gt;

&lt;p&gt;During my research into finding a free/cheap online typing program, I
ran across this article by Jeff Atwood titled, “&lt;a href=&quot;http://www.codinghorror.com/blog/2008/11/we-are-typists-first-programmers-second.html&quot;&gt;We Are Typists First,
Programmers Second&lt;/a&gt;,” which helped validate my resolution.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Sharing Functions Between Records in Clojure</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/27/sharing-functions-between-records-in-clojure.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>27 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/27/sharing-functions-between-records-in-clojure</id>
   <content type="html">&lt;p&gt;Today I came across a nice way to share functionality between records
that extend the same protocol in Clojure. I recently wanted a way to
encapsulate some functionality into a record via &lt;code&gt;defrecord&lt;/code&gt; but noticed
some duplication, after a little digging around I found some nice tips
for doing this. Unfortunately, I can’t find those links in my history. I
have the next best thing though, some test code examples.&lt;/p&gt;

&lt;p&gt;Notice in the example below that both &lt;code&gt;TextPrinter&lt;/code&gt; and &lt;code&gt;HtmlPrinter&lt;/code&gt;
have access to the &lt;code&gt;ouput&lt;/code&gt; function and &lt;code&gt;upper-case&lt;/code&gt; function.
&lt;code&gt;HtmlPrinter&lt;/code&gt; overrides the default &lt;code&gt;output&lt;/code&gt; function while
&lt;code&gt;TextPrinter&lt;/code&gt; keeps both defaults. This pattern may work well if you
would like to reduce duplication and separate these records into
difference namespaces.&lt;/p&gt;

&lt;p&gt;Sample code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;; src/protocol_test/core.clj&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protocol-tests.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defprotocol &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IPrinter&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upper-case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PrinterDefaults&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;ss&quot;&gt;:upper-case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clojure.string/upper-case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))})&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TextPrinter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defrecord &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HtmlPrinter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TextPrinter&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;IPrinter&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;merge &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PrinterDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;HtmlPrinter&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;IPrinter&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;merge &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PrinterDefaults&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upper-case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
And the tests:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;; spec/protocol_tests/core_spec.clj&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protocol-tests.core-spec&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;speclj.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protocol-tests.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protocol_tests.core&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;TextPrinter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;HtmlPrinter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;core&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;returns the default functionality&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sample text&amp;quot;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-out-str &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TextPrinter.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sample text&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;returns the SAMPLE TEXT surrounded by a p tag&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;should=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;SAMPLE TEXT&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-out-str &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HtmlPrinter.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sample text&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Aside:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice how I had to &lt;code&gt;import&lt;/code&gt; the records in the spec. I had to use an
underscore in &lt;code&gt;protocol_tests.core&lt;/code&gt; which I believe is a bug in the 
current version of Clojure (1.4).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>First Day Practicing Joodo</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/26/first-day-practicing-joodo.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>26 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/26/first-day-practicing-joodo</id>
   <content type="html">&lt;p&gt;I downloaded and started working with Joodo this morning. This is my
first Clojure web framework. I’ve work with several other web frameworks
in several languages and I’m familiar with how they work. &lt;/p&gt;

&lt;p&gt;Joodo is as simple to use as any other framework. The setup time was
minimal and I had the server up and running in less than 30 minutes. The
only bump I came up against was when I tried deploying my test app on
Heroku. The included Procfile wasn’t starting up the web worker properly
and Heroku complained about binding to the wrong port and address. I
fixed these and was about to submit a bug when I noticed the bug is
already fixed on the Joodo Github repo but the new jar hasn’t been
deployed to Clojars. &lt;/p&gt;

&lt;p&gt;Working with Joodo meant working with hiccup templates. When I first saw
these templates a few weeks ago I found them a bit odd. They reminded me
of Haml which I don’t use unless necessary. Having worked with Clojure
these past few weeks, however, has warmed me up to these hiccup
templates and now I find them very easy to use. I also enjoy not having
to switch contexts in my brain from HTML to Clojure and vice versa. &lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.joodoweb.com/&quot;&gt;Joodo Web Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/weavejester/hiccup&quot;&gt;Hiccup Templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>SOLID</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/24/solid.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>24 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/24/solid</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This post will be edited as I learn more about SOLID. For
information from more authoritative sources check the
&lt;a href=&quot;#references&quot;&gt;references&lt;/a&gt; below.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;single-responsibility-principle&quot;&gt;Single Responsibility Principle&lt;/h3&gt;

&lt;p&gt;Every class should have a single responsibility. A responsibility is
defined as a reason to change.&lt;/p&gt;

&lt;p&gt;Take the following example (adapted from this &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.SrpInRuby&quot;&gt;SRP in Ruby article&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# employee.rb
class Employee
  def set_hours(hours)
  ...
  end
  def calculate_pay
  ...
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Employee class is calculating the pay and accepts the number of
hours an employee works. Those are two separate responsibilities.&lt;/p&gt;

&lt;p&gt;This change would assure each file has only a single responsibility.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# employee_time.rb
class EmployeeTime
  def set_hours(hours)
  ...
  end
end

# employee_pay.rb
class EmployeePay
  def calculate_pay
  ...
  end
end

# employee.rb
require 'employee_time'
require 'employee_pay'

class Employee
  include EmployeeTime
  include EmployeePay
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;openclosed-principle&quot;&gt;Open/closed Principle&lt;/h3&gt;

&lt;p&gt;You should be able to extend a class’ behavior without modifying the
class.&lt;/p&gt;

&lt;h3 id=&quot;liskov-substitution-principle&quot;&gt;Liskov Substitution Principle&lt;/h3&gt;

&lt;p&gt;Derived classes should be substitutable for their base classes.&lt;/p&gt;

&lt;h3 id=&quot;interface-segregation-principle&quot;&gt;Interface Segregation Principle&lt;/h3&gt;

&lt;p&gt;Make fine grained classes that are client specific.&lt;/p&gt;

&lt;h3 id=&quot;dependency-inversion-principle&quot;&gt;Dependency Inversion Principle&lt;/h3&gt;

&lt;p&gt;Depend on abstractions, not concretions.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&quot;&gt;The Principles of OOD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID (object-oriented design)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Installing Ruby 2.0.0-p0</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/24/installing-ruby-2-0-0-p0.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>24 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/24/installing-ruby-2-0-0-p0</id>
   <content type="html">&lt;p&gt;I kept receiving a complilation error while installing Ruby 2.0.0-p0 today. &lt;/p&gt;

&lt;p&gt;I use rbenv/ruby-build and had to use this snippet for installation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ CC=cc rbenv install 2.0.0-p0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
I hope this helps anyone experiencing trouble installing Ruby 2.0.0&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Four-by-four Tic Tac Toe</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/21/four-by-four-tic-tac-toe.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>21 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/21/four-by-four-tic-tac-toe</id>
   <content type="html">&lt;p&gt;I started refactoring my code in preparation of implementing the 4x4
board and the eventual 3x3x3 board. I began by re-namespacing my files
for clarity. In my main &lt;code&gt;ticlj&lt;/code&gt; directory, I now have &lt;code&gt;board&lt;/code&gt;, &lt;code&gt;player&lt;/code&gt;,
&lt;code&gt;printer&lt;/code&gt; and &lt;code&gt;rules&lt;/code&gt; as directories and &lt;code&gt;core.clj&lt;/code&gt; as the only file in the
root directory. I felt this cleaned up the root directory and made the
subdirectory names more meaningful. I previously had &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;io&lt;/code&gt; as the
only subdirectories of the root which weren’t very clear. &lt;/p&gt;

&lt;p&gt;I also began converting functions to use multi-methods as their data source 
and the process has been pretty straightforward. &lt;/p&gt;

&lt;p&gt;I worked my way through adding new tests that needed a 4x4 counterpart.
Once done, I realized I hadn’t ran the game once to see how things were
going and I was very proud. After making sure there weren’t any missing
tests, I fired up the game and everything worked right off the bat. The
4x4 board printed as expected and the AI’s played without problems (aside
form performance issues). Everything worked as well, if not better than I 
could have hoped for the first run.&lt;/p&gt;

&lt;p&gt;Now I think the 3x3x3 Tic Tac Toe game should be very easy to implement
as well. I’ll be doing that next week.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: It’s my mom’s 71st Birthday today. :tada:&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Powerline</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/20/powerline.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>20 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/20/powerline</id>
   <content type="html">&lt;p&gt;I ran across a cool Vim plugin today named, &lt;a href=&quot;https://github.com/Lokaltog/powerline&quot;&gt;Powerline&lt;/a&gt;. It nicely decorates
your Vim status line and includes VCS status, file path, file type,
etc. My previous status line was hard to read and understand so I hardly
looked at it.&lt;/p&gt;

&lt;p&gt;Here’s a look at my new Vim status line:
&lt;a href=&quot;/images/powerline-vim.png&quot;&gt;&lt;img src=&quot;/images/powerline-vim.png&quot; alt=&quot;Vim Powerline status line&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Along the way, while figuring out how to configure Powerline for Vim, I
ran across &lt;a href=&quot;https://github.com/erikw/tmux-powerline&quot;&gt;tmux-powerline&lt;/a&gt; which decorates tmux’s status line. The
concept is directly taken from Powerline, but there are more widgets
for showing different information, including: WAN and
LAN IP, your current Git branch and status, weather, and a few
more.&lt;/p&gt;

&lt;p&gt;Here’s a look at my new tmux status line:
&lt;a href=&quot;/images/tmux-powerline.png&quot;&gt;&lt;img src=&quot;/images/tmux-powerline.png&quot; alt=&quot;tmux-powerline status line&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both plugins look nice, but besides the aesthetics, the information
the provided is very useful and prensented clearly.&lt;/p&gt;

&lt;p&gt;Although the setup for these plugins is a little difficult, I still
recommend taking the half hour to an hour it takes and check them out.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>4x4 Tic Tac Toe</title>
   <category term="" />
   <link href="http://sa.ndropad.in/2013/02/19/4x4-tic-tac-toe.html"/>
   <author>
     <name>[]</name>
   </author>
   <updated>19 Feb 2013</updated>
   <id>http://sa.ndropad.in/2013/02/19/4x4-tic-tac-toe</id>
   <content type="html">&lt;p&gt;I spent the majority of the day determining how I should add the 4x4
game to my implementation. As far as I can tell there are three major
parts that change: the rules, printer and board. I will likely convert
these to protocols and define types for them. I’m interested in seeing
how I can refactor my code effectively and reduce bugs from simple copy
and paste mistakes. &lt;/p&gt;

&lt;p&gt;I’ll post updates this week with my findings. I’ll also be posting about
&lt;a href=&quot;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt; this week in preparation of “teaching” Micah about the subject.&lt;/p&gt;

</content>
 </entry>
 

</feed>
